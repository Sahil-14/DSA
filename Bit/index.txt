1. bit operations
  //get bit at position
  public int getBit(int n,int pos){
    return n & (1 << pos);
  }
  // set 1 to position
  public int setBit(int n,int pos){
    return n | (1 << pos);
  }

  public int  clearBit(int n,int pos){
    int mask = ~(1 << pos);
    return (n & mask);
  }

  public int updateBit(int n,int pos,int value){
    int mask = ~(1 << pos);
    n = n & mask;
    return n | (value << pos);
  }

2. Check number is power of 2

 public static boolean isPowerOf2(int n) {
    return n != 0 && ((n & (n - 1)) == 0);
  }

3. Count number of once in binary number
 public static int countOnce(int n) {
    int count = 0;
    while (n != 0) {
      n = n & (n - 1);
      count++;
    }
    return count;
  }

  public static int countOnce2(int n) {
    int count = 0;
    for (int i = 31; i >= 0; i--) {
      int k = n >> i;
      if ((k & 1) == 1) {
        count++;
      }
    }
    return count;
  }

4.
 public static void subset(int arr[], int n) {
    for (int i = 0; i < (1 << n); i++) {
      for (int j = 0; j < n; j++) {
        if ((i & (1 << j)) != 0) {
          System.out.print(arr[j] + "\t");
        }
      }
      System.out.println();
    }
  }

Given a number N having only one ‘1’ and all other ’0’s in its binary representation,
5.
 static int findPosition(int n) {
    if (!isPowerOf2(n)) {
      return -1;
    }
    unsigned count = 0;
    while (n) {
      n = n >> 1;
      ++count;
    }

    return count;

  }

6. Conunt bit differece
 public static int countSetBits(int n) {
    int count = 0;
    while (n > 0) {
      count += n & 1;
      n >>= 1;
    }
    return count;

  }
  public static int countOnce(int n) {
    int count = 0;
    while (n != 0) {
      n = n & (n - 1);
      count++;
    }
    return count;
  }

  // Function to find number of bits needed to be flipped to convert A to B
  public static int countBitsFlip(int a, int b) {

    // XOR operation gives set bits only when there are dissimilar bits.
    // We store the value of XOR operation of a and b.
    int ans = a ^ b;
    return countSetBits(ans);

  }

7. find 2 unique 

public class bit_prob_7 {
  public static void UniqueNumbers2(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
      sum = (sum ^ arr[i]);
    }
    // Bitwise & the sum with it's 2's Complement
    // Bitwise & will give us the sum containing
    // only the rightmost set bit
    sum = (sum & -sum);

    // sum1 and sum2 will contains 2 unique
    // elements elements initialized with 0 box
    // number xored with 0 is number itself
    int sum1 = 0;
    int sum2 = 0;
    // traversing the array again
    for (int i = 0; i < arr.length; i++) {

      // Bitwise & the arr[i] with the sum
      // Two possibilities either result == 0
      // or result > 0
      if ((arr[i] & sum) > 0) {

        // if result > 0 then arr[i] xored
        // with the sum1
        sum1 = (sum1 ^ arr[i]);
      } else {
        // if result == 0 then arr[i]
        // xored with sum2
        sum2 = (sum2 ^ arr[i]);
      }
    }
    // print the the two unique numbers
    System.out.println("The non-repeating elements are "
        + sum1 + " and " + sum2);
  }

8.2 missing
 public static void twoMissing(int arr[], int n) {
    int xor = 0;
    for (int i = 0; i < arr.length; i++) {
      xor = xor ^ arr[i];
    }

    for (int i = 1; i <= n; i++) {
      xor = xor ^ i;
    }

    // get set bit in xor
    int set_bit_no = xor & ~(xor - 1);
    // int set_bit_no = xor & -xor;;

    // Now divide elements in two sets by comparing
    // rightmost set bit of XOR with bit at same
    // position in each element.
    int x = 0, y = 0;
    for (int i = 0; i < arr.length; i++) {
      if ((arr[i] & set_bit_no) > 0) {
        x = x ^ arr[i];
      } else {
        y = y ^ arr[i];
      }
    }

    for (int i = 1; i <= n; i++) {
      if ((i & set_bit_no) > 0) {
        x = x ^ i;
      } else {
        y = y ^ i;
      }
    }
    System.out.println(x);
    System.out.println(y);
  }


9.copy set bit 

static int copySetBits(int x, int y, int l, int r) {
    if (l < 1 || r > 32)
      return x;
    for (int i = l; i <= r; i++) {
      int mask = i << (i - 1);
      if ((y & mask) != 0) {
        // set bit in x
        x = x | mask;
      }
    }
    return x;
  }

10. find square without using *,/ power

 // o(n)
  public static int square(int n) {
    if (n < 0) {
      n = -n;
    }
    int res = n;
    for (int i = 1; i < n; i++) {
      res += n;
    }
    return res;
  }

  public int square2(int n) {
    if (n == 0) {
      return 0;
    }
    if (n < 0) {
      n = -n;
    }

    // Get floor(n/2) using
    // right shift
    int x = n >> 1;
    
    if(n %2 != 0){
      return ((square(x) << 2) + (x << 2) +1);
    }else{
      return (square(x) << 2);
    }

  }

  