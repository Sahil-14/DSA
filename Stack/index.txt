static final int MAX =1000;
    int top;
    int a[] = new int[MAX];
    StackOperations(){
        top = -1;
    }

/// Note for Infix ,prefix ,postfix
/// every thing is reverse in prefix
for infix to prefix conversion
 -  first reverse string 
 -  replace '(' with ')' and '('  wiht ')'
 -  apply postfix

In postfix to infix /prefixt 
 - op1 = stack.pop() 
 - op2 = stack.pop() 
 stack.push(op2+charAt(i)+op1);   //stack.push(charAt(i)+op2+op1); 

 1. isEmpty   
    boolean isEmpty(){
        return (top < 0);
    }

2. push
    boolean push(int x){
        if(top >= MAX -1){
            System.out.println("Stack overflow");
            return false ;
        }else{
            a[++top] = x;
            System.out.println("Pushed to stack");
            return true;
        }
    }

3.pop
    int pop(){
        if(top < 0){
            System.out.println("Stack underflow");
            return 0 ;
        }else{
            int x = a[top--];
            return x;
        }
    }
    
4.peek
    int peek(){
        if(top < 0){
            System.out.println("Stack underflow");
            return 0 ;
        }
        else{
            return a[top];
        }
    }
5.reverse indivisual words of string
 public static String reverseWords(String str) {
        Stack<Character> stack = new Stack<>();
        String result = "";
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c != ' ') {
                stack.push(c);
            } else {
                while (!stack.isEmpty()) {
                    result += stack.pop();
                }
                result += " ";

            }

        }
        while (!stack.isEmpty()) {
            result += stack.pop();
        }
        return result;
    }

6. Delete mid from stack

static void deleteMiddle(Stack<Character> st, int n, int curr) {
        if (st.isEmpty()) {
            return;
        }
        char x = st.peek();
        st.pop();
        deleteMiddle(st, n, curr + 1);
        if (curr != n / 2) {
            st.push(x);
        }
    }

7.Reverse stack without extra space

    static void insertAtBottom(char x){
        if(st.isEmpty()){
            st.push(x);
        }else{
             // All items are held in Function
            // Call Stack until we reach end
            // of the stack. When the stack becomes
            // empty, the st.size() becomes 0, the
            // above if part is executed and 
            // the item is inserted at the bottom

            char a = st.peek();
            st.pop();
            insertAtBottom(x);
             
            // push allthe items held 
            // in Function Call Stack
            // once the item is inserted 
            // at the bottom

            st.push(a);
        }
    }

    static void reverse(){
        if(st.size() > 0){
            char x = st.peek() ;
            st.pop();
            reverse();
            insertAtBottom(x);
        }
    }

8.Reverse using linked list

class StackNode {
    int data;
    StackNode next;

    public StackNode(int data) {
        this.data = data;
        this.next = null;
    }
}

public class ReversestackWithoutExtraSpace {
    StackNode top;

    public void push(int data) {
        if (this.top == null) {
            top = new StackNode(data);
            return;
        }
        StackNode s = new StackNode(data);
        s.next = this.top;
        this.top = s;
    }

    public StackNode pop() {
        StackNode s = this.top;
        this.top = this.top.next;
        return s;
    }

    void display() {
        StackNode s = this.top;
        while (s != null) {
            System.out.print(s.data + " ");
            s = s.next;
        }
        System.out.println();
    }

    public void reverse() {
        StackNode curr, prev, next;
        prev = next = null;
        curr = this.top;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        this.top = prev;
    }

    public static void main(String arg[]) {
        ReversestackWithoutExtraSpace s = new ReversestackWithoutExtraSpace();
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
        System.out.println("Original Stack");
        s.display();
        System.out.println(s.top);
        s.reverse();
        System.out.println("Reversed Stack");
        s.display();
    }
}


9.balance parenthesis

 static boolean areBreketsBalanced(String exp) {
        Deque<Character> stack = new ArrayDeque<>();
        for (int i = 0; i < exp.length(); i++) {
            char x = exp.charAt(i);

            if (x == '(' || x == '{' || x == '[') {
                stack.push(x);
            }

            if (stack.isEmpty())
                return false;

            char chek;
            switch (x) {
                case ')':
                    chek = stack.pop();
                    if (chek == '{' || chek == '[') {
                        return false;
                    }
                    break;
                case '}':
                    chek = stack.pop();
                    if (chek == '(' || chek == '[') {
                        return false;
                    }
                    break;
                case ']':
                    chek = stack.pop();
                    if (chek == '{' || chek == '(') {
                        return false;
                    }
                    break;
            }
        }
        return (stack.isEmpty());
    }



10 .Infix to  postfix conversion
  
    static String infixToPostfix(String exp) {
        String result = new String("");
        Stack<Character> stack = new Stack<>();
        
        for(int i = 0;i<exp.length();++i){
            char c = exp.charAt(i);

            if(Character.isLetterOrDigit(c)){
                result+=c;
            }
            else if(c == '('){
                stack.push(c);
            }
            else if(c == ')'){
                while(!stack.isEmpty() && stack.peek() != '('){
                    result+= stack.pop();
                }
                stack.pop();
            }else{
                while(!stack.isEmpty() && prec(c) < prec(stack.peek())){
                    result+=stack.pop();
                }
                stack.push(c);
            }
            
        }
        return result;
    }


11. Infix to prefix

static String infixToPrefix(char infix[]) {
        int l = infix.length;
        String infix1 = reverse(infix, 0, l - 1);
        infix = infix1.toCharArray();
        String result = new String("");
        for (int i = 0; i < l; i++) {
            if (infix[i] == '(') {
                infix[i] = ')';
                // i++;
            } else if (infix[i] == ')') {
                infix[i] = '(';
                // i++;
            }
        }
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < l; i++) {
            char c = infix[i];
            if (Character.isLetterOrDigit(c)) {
                result += c;
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result += stack.pop();
                }
                // remove '('
                stack.pop();
            } else {
                while (!stack.isEmpty() && prec(c) < prec(stack.peek())) {
                    result += stack.pop();
                }
                stack.push(c);
            }
        }
        while(!stack.isEmpty()){
            result+=stack.pop();
        }

        return result;// reverse it

    }

12 . Postfix to prefix  
   static String postToPre(String post_exp){
        Stack<String> stack = new Stack<>();
        int l = post_exp.length();
        for(int i = 0;i<l;i++){
            char c = post_exp.charAt(i);
            if(isOperator(c)){
                String op1 = stack.pop();
                String op2 = stack.pop();
                String temp = c+op2+op1;
                stack.push(temp);
            }else{
                stack.push(c+"");
            }
        }
        return stack.peek();

    }

13. postfix to infix
   public static String postfixToInfix(String exp) {
        Stack<String> stack = new Stack<>();
        for (int i = 0; i < exp.length(); i++) {
            if (isOperand(exp.charAt(i))) {
                // convert char to string
                stack.push(exp.charAt(i) + "");
            } else {
                String op1 = stack.pop();
                String op2 = stack.pop();
                String temp = "(" + op2 + exp.charAt(i) + op1 + ")";
                stack.push(temp);
            }
        }
        return stack.pop();
    }

14.prefix to infix (travers reverse or reverse string)
  public static String prefixToInfix(String str) {
        Stack<String> stack = new Stack<>();
        int l = str.length();
        for (int i = l - 1; i >= 0; i--) {
            char c = str.charAt(i);
            if (isOperator(c)) {
                String op1 = stack.pop();
                String op2 = stack.pop();
                String temp = "(" + op1 + c + op2 + ")";
                stack.push(temp);
            } else {
                stack.push(c + "");
            }
        }
        return stack.pop();
    }

15. Prefix to postfix
 static String preToPost(String pre_exp){
        Stack<String> stack = new Stack<>();
        for(int i = pre_exp.length() -1;i>=0 ;i--){
            char c = pre_exp.charAt(i);
            if(isOperator(c)){
                String op1 = stack.pop();
                String op2 = stack.pop();
                String temp = op1+op2+c;
                stack.push(temp);
            }else{
                stack.push(c+"");
            }
        }
        return stack.peek();
    }

16.postfix evaluation

 static int postfixEvaluation(String exp) {
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < exp.length(); i++) {
            char c = exp.charAt(i);

            if (Character.isDigit(c)) {
                stack.push(c - '0');
            } else {
                int val1 = stack.pop();
                int val2 = stack.pop();
                switch (c) {
                    case '+':
                        stack.push(val2 + val1);
                        break;
                    case '-':
                        stack.push(val2 - val1);
                        break;
                    case '/':
                        stack.push(val2 / val1);
                        break;
                    case '*':
                        stack.push(val2 * val1);
                        break;
                }
            }
        }
        return stack.pop();

    }